package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set WalletQuerySet

// WalletQuerySet is an queryset type for Wallet
type WalletQuerySet struct {
	db *gorm.DB
}

// NewWalletQuerySet constructs new WalletQuerySet
func NewWalletQuerySet(db *gorm.DB) WalletQuerySet {
	return WalletQuerySet{
		db: db.Model(&Wallet{}),
	}
}

func (qs WalletQuerySet) w(db *gorm.DB) WalletQuerySet {
	return NewWalletQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) All(ret *[]Wallet) error {
	return qs.db.Find(ret).Error
}

// BalanceEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceEq(balance float64) WalletQuerySet {
	return qs.w(qs.db.Where("balance = ?", balance))
}

// BalanceGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceGt(balance float64) WalletQuerySet {
	return qs.w(qs.db.Where("balance > ?", balance))
}

// BalanceGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceGte(balance float64) WalletQuerySet {
	return qs.w(qs.db.Where("balance >= ?", balance))
}

// BalanceIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceIn(balance float64, balanceRest ...float64) WalletQuerySet {
	iArgs := []interface{}{balance}
	for _, arg := range balanceRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("balance IN (?)", iArgs))
}

// BalanceLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceLt(balance float64) WalletQuerySet {
	return qs.w(qs.db.Where("balance < ?", balance))
}

// BalanceLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceLte(balance float64) WalletQuerySet {
	return qs.w(qs.db.Where("balance <= ?", balance))
}

// BalanceNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceNe(balance float64) WalletQuerySet {
	return qs.w(qs.db.Where("balance != ?", balance))
}

// BalanceNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BalanceNotIn(balance float64, balanceRest ...float64) WalletQuerySet {
	iArgs := []interface{}{balance}
	for _, arg := range balanceRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("balance NOT IN (?)", iArgs))
}

// BlockedEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BlockedEq(blocked bool) WalletQuerySet {
	return qs.w(qs.db.Where("blocked = ?", blocked))
}

// BlockedIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BlockedIn(blocked bool, blockedRest ...bool) WalletQuerySet {
	iArgs := []interface{}{blocked}
	for _, arg := range blockedRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("blocked IN (?)", iArgs))
}

// BlockedNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BlockedNe(blocked bool) WalletQuerySet {
	return qs.w(qs.db.Where("blocked != ?", blocked))
}

// BlockedNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) BlockedNotIn(blocked bool, blockedRest ...bool) WalletQuerySet {
	iArgs := []interface{}{blocked}
	for _, arg := range blockedRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("blocked NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Wallet) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) CreatedAtEq(createdAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) CreatedAtGt(createdAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) CreatedAtGte(createdAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) CreatedAtLt(createdAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) CreatedAtLte(createdAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) CreatedAtNe(createdAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) Delete() error {
	return qs.db.Delete(Wallet{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Wallet) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtEq(deletedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtGt(deletedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtGte(deletedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtIsNotNull() WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtIsNull() WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtLt(deletedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtLte(deletedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) DeletedAtNe(deletedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GetUpdater() WalletUpdater {
	return NewWalletUpdater(qs.db)
}

// GroupIDEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDEq(groupID uint) WalletQuerySet {
	return qs.w(qs.db.Where("group_id = ?", groupID))
}

// GroupIDGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDGt(groupID uint) WalletQuerySet {
	return qs.w(qs.db.Where("group_id > ?", groupID))
}

// GroupIDGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDGte(groupID uint) WalletQuerySet {
	return qs.w(qs.db.Where("group_id >= ?", groupID))
}

// GroupIDIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDIn(groupID uint, groupIDRest ...uint) WalletQuerySet {
	iArgs := []interface{}{groupID}
	for _, arg := range groupIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("group_id IN (?)", iArgs))
}

// GroupIDLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDLt(groupID uint) WalletQuerySet {
	return qs.w(qs.db.Where("group_id < ?", groupID))
}

// GroupIDLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDLte(groupID uint) WalletQuerySet {
	return qs.w(qs.db.Where("group_id <= ?", groupID))
}

// GroupIDNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDNe(groupID uint) WalletQuerySet {
	return qs.w(qs.db.Where("group_id != ?", groupID))
}

// GroupIDNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) GroupIDNotIn(groupID uint, groupIDRest ...uint) WalletQuerySet {
	iArgs := []interface{}{groupID}
	for _, arg := range groupIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("group_id NOT IN (?)", iArgs))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDEq(ID uint) WalletQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDGt(ID uint) WalletQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDGte(ID uint) WalletQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDIn(ID uint, IDRest ...uint) WalletQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDLt(ID uint) WalletQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDLte(ID uint) WalletQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDNe(ID uint) WalletQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) IDNotIn(ID uint, IDRest ...uint) WalletQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) Limit(limit int) WalletQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) NameEq(name string) WalletQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) NameIn(name string, nameRest ...string) WalletQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) NameNe(name string) WalletQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) NameNotIn(name string, nameRest ...string) WalletQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs WalletQuerySet) One(ret *Wallet) error {
	return qs.db.First(ret).Error
}

// OrderAscByBalance is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByBalance() WalletQuerySet {
	return qs.w(qs.db.Order("balance ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByCreatedAt() WalletQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByDeletedAt() WalletQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByGroupID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByGroupID() WalletQuerySet {
	return qs.w(qs.db.Order("group_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByID() WalletQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByOwnerID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByOwnerID() WalletQuerySet {
	return qs.w(qs.db.Order("owner_id ASC"))
}

// OrderAscByTokenExpiry is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByTokenExpiry() WalletQuerySet {
	return qs.w(qs.db.Order("token_expiry ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByUpdatedAt() WalletQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByWalletID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderAscByWalletID() WalletQuerySet {
	return qs.w(qs.db.Order("wallet_id ASC"))
}

// OrderDescByBalance is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByBalance() WalletQuerySet {
	return qs.w(qs.db.Order("balance DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByCreatedAt() WalletQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByDeletedAt() WalletQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByGroupID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByGroupID() WalletQuerySet {
	return qs.w(qs.db.Order("group_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByID() WalletQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByOwnerID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByOwnerID() WalletQuerySet {
	return qs.w(qs.db.Order("owner_id DESC"))
}

// OrderDescByTokenExpiry is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByTokenExpiry() WalletQuerySet {
	return qs.w(qs.db.Order("token_expiry DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByUpdatedAt() WalletQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByWalletID is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OrderDescByWalletID() WalletQuerySet {
	return qs.w(qs.db.Order("wallet_id DESC"))
}

// OwnerIDEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDEq(ownerID uint) WalletQuerySet {
	return qs.w(qs.db.Where("owner_id = ?", ownerID))
}

// OwnerIDGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDGt(ownerID uint) WalletQuerySet {
	return qs.w(qs.db.Where("owner_id > ?", ownerID))
}

// OwnerIDGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDGte(ownerID uint) WalletQuerySet {
	return qs.w(qs.db.Where("owner_id >= ?", ownerID))
}

// OwnerIDIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDIn(ownerID uint, ownerIDRest ...uint) WalletQuerySet {
	iArgs := []interface{}{ownerID}
	for _, arg := range ownerIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("owner_id IN (?)", iArgs))
}

// OwnerIDLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDLt(ownerID uint) WalletQuerySet {
	return qs.w(qs.db.Where("owner_id < ?", ownerID))
}

// OwnerIDLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDLte(ownerID uint) WalletQuerySet {
	return qs.w(qs.db.Where("owner_id <= ?", ownerID))
}

// OwnerIDNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDNe(ownerID uint) WalletQuerySet {
	return qs.w(qs.db.Where("owner_id != ?", ownerID))
}

// OwnerIDNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) OwnerIDNotIn(ownerID uint, ownerIDRest ...uint) WalletQuerySet {
	iArgs := []interface{}{ownerID}
	for _, arg := range ownerIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("owner_id NOT IN (?)", iArgs))
}

// SetBalance is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetBalance(balance float64) WalletUpdater {
	u.fields[string(WalletDBSchema.Balance)] = balance
	return u
}

// SetBlocked is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetBlocked(blocked bool) WalletUpdater {
	u.fields[string(WalletDBSchema.Blocked)] = blocked
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetCreatedAt(createdAt time.Time) WalletUpdater {
	u.fields[string(WalletDBSchema.CreatedAt)] = createdAt
	return u
}

// SetGroupID is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetGroupID(groupID uint) WalletUpdater {
	u.fields[string(WalletDBSchema.GroupID)] = groupID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetID(ID uint) WalletUpdater {
	u.fields[string(WalletDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetName(name string) WalletUpdater {
	u.fields[string(WalletDBSchema.Name)] = name
	return u
}

// SetOwnerID is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetOwnerID(ownerID uint) WalletUpdater {
	u.fields[string(WalletDBSchema.OwnerID)] = ownerID
	return u
}

// SetToken is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetToken(token string) WalletUpdater {
	u.fields[string(WalletDBSchema.Token)] = token
	return u
}

// SetTokenExpiry is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetTokenExpiry(tokenExpiry time.Time) WalletUpdater {
	u.fields[string(WalletDBSchema.TokenExpiry)] = tokenExpiry
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetUpdatedAt(updatedAt time.Time) WalletUpdater {
	u.fields[string(WalletDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetWalletID is an autogenerated method
// nolint: dupl
func (u WalletUpdater) SetWalletID(walletID uint64) WalletUpdater {
	u.fields[string(WalletDBSchema.WalletID)] = walletID
	return u
}

// TokenEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenEq(token string) WalletQuerySet {
	return qs.w(qs.db.Where("token = ?", token))
}

// TokenExpiryEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenExpiryEq(tokenExpiry time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("token_expiry = ?", tokenExpiry))
}

// TokenExpiryGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenExpiryGt(tokenExpiry time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("token_expiry > ?", tokenExpiry))
}

// TokenExpiryGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenExpiryGte(tokenExpiry time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("token_expiry >= ?", tokenExpiry))
}

// TokenExpiryLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenExpiryLt(tokenExpiry time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("token_expiry < ?", tokenExpiry))
}

// TokenExpiryLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenExpiryLte(tokenExpiry time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("token_expiry <= ?", tokenExpiry))
}

// TokenExpiryNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenExpiryNe(tokenExpiry time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("token_expiry != ?", tokenExpiry))
}

// TokenIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenIn(token string, tokenRest ...string) WalletQuerySet {
	iArgs := []interface{}{token}
	for _, arg := range tokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("token IN (?)", iArgs))
}

// TokenNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenNe(token string) WalletQuerySet {
	return qs.w(qs.db.Where("token != ?", token))
}

// TokenNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) TokenNotIn(token string, tokenRest ...string) WalletQuerySet {
	iArgs := []interface{}{token}
	for _, arg := range tokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("token NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u WalletUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) UpdatedAtEq(updatedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) UpdatedAtGt(updatedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) UpdatedAtGte(updatedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) UpdatedAtLt(updatedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) UpdatedAtLte(updatedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) UpdatedAtNe(updatedAt time.Time) WalletQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// WalletIDEq is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDEq(walletID uint64) WalletQuerySet {
	return qs.w(qs.db.Where("wallet_id = ?", walletID))
}

// WalletIDGt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDGt(walletID uint64) WalletQuerySet {
	return qs.w(qs.db.Where("wallet_id > ?", walletID))
}

// WalletIDGte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDGte(walletID uint64) WalletQuerySet {
	return qs.w(qs.db.Where("wallet_id >= ?", walletID))
}

// WalletIDIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDIn(walletID uint64, walletIDRest ...uint64) WalletQuerySet {
	iArgs := []interface{}{walletID}
	for _, arg := range walletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("wallet_id IN (?)", iArgs))
}

// WalletIDLt is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDLt(walletID uint64) WalletQuerySet {
	return qs.w(qs.db.Where("wallet_id < ?", walletID))
}

// WalletIDLte is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDLte(walletID uint64) WalletQuerySet {
	return qs.w(qs.db.Where("wallet_id <= ?", walletID))
}

// WalletIDNe is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDNe(walletID uint64) WalletQuerySet {
	return qs.w(qs.db.Where("wallet_id != ?", walletID))
}

// WalletIDNotIn is an autogenerated method
// nolint: dupl
func (qs WalletQuerySet) WalletIDNotIn(walletID uint64, walletIDRest ...uint64) WalletQuerySet {
	iArgs := []interface{}{walletID}
	for _, arg := range walletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("wallet_id NOT IN (?)", iArgs))
}

// ===== END of query set WalletQuerySet

// ===== BEGIN of Wallet modifiers

type walletDBSchemaField string

// WalletDBSchema stores db field names of Wallet
var WalletDBSchema = struct {
	ID          walletDBSchemaField
	CreatedAt   walletDBSchemaField
	UpdatedAt   walletDBSchemaField
	DeletedAt   walletDBSchemaField
	Name        walletDBSchemaField
	WalletID    walletDBSchemaField
	Blocked     walletDBSchemaField
	Token       walletDBSchemaField
	TokenExpiry walletDBSchemaField
	Balance     walletDBSchemaField
	OwnerID     walletDBSchemaField
	GroupID     walletDBSchemaField
}{

	ID:          walletDBSchemaField("id"),
	CreatedAt:   walletDBSchemaField("created_at"),
	UpdatedAt:   walletDBSchemaField("updated_at"),
	DeletedAt:   walletDBSchemaField("deleted_at"),
	Name:        walletDBSchemaField("name"),
	WalletID:    walletDBSchemaField("wallet_id"),
	Blocked:     walletDBSchemaField("blocked"),
	Token:       walletDBSchemaField("token"),
	TokenExpiry: walletDBSchemaField("token_expiry"),
	Balance:     walletDBSchemaField("balance"),
	OwnerID:     walletDBSchemaField("owner_id"),
	GroupID:     walletDBSchemaField("group_id"),
}

// Update updates Wallet fields by primary key
func (o *Wallet) Update(db *gorm.DB, fields ...walletDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":           o.ID,
		"created_at":   o.CreatedAt,
		"updated_at":   o.UpdatedAt,
		"deleted_at":   o.DeletedAt,
		"name":         o.Name,
		"wallet_id":    o.WalletID,
		"blocked":      o.Blocked,
		"token":        o.Token,
		"token_expiry": o.TokenExpiry,
		"balance":      o.Balance,
		"owner_id":     o.OwnerID,
		"group_id":     o.GroupID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := string(f)
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Wallet %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// WalletUpdater is an Wallet updates manager
type WalletUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewWalletUpdater creates new Wallet updater
func NewWalletUpdater(db *gorm.DB) WalletUpdater {
	return WalletUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Wallet{}),
	}
}

// ===== END of Wallet modifiers

// ===== END of all query sets
